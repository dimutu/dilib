/*! \page intro_class Classes Introduction

\section intro_class_overview Overview

All the classes used for implementing the behavior tree are templated for the objects is use, and most classes can use from its default behaviors 
but all of these classes can implement and overridden to use how ever it is needed to be.

\li <b>DiTask</b> - This the base class for all other classes. This class cannot be use as it is and must be implemented into its own class to use.
\li <b>DiFilter</b> - This is for executing code between time intervals and can use as is. Can set the time interval from UI and it will execute the child task inside on evertime the interval triggers.
\li <b>DiCondition</b> - This can explain as IF condition for the tree, has two child tasks which can trigger on a condition. Must be implemented to use from the base class.
\li <b>DiSequence</b> - This is collection of tasks which will execute all its child tasks in single execution, and can use as is without implementation.
\li <b>DiSelection</b> - This is the SWITCH statement for the tree, and default implementation only executes single task and move on to next.
\li <b>DiRoot</b> - This is root of the tree and has the main execute function gets called from the main update. Default execution style is match to DiSlection but can be implement to reflect other styles.

*/