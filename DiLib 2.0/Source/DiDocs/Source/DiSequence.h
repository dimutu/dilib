



#ifndef _DI_SEQUENCE_TASK_H_
#define _DI_SEQUENCE_TASK_H_

#include <vector>
#include "DiTask.h"

//! \details Main library namespace

//! \namespace DiLib
namespace DiLib
{
	//! class DiSequence
	//! \details Execute the tasks in the list in sequential order, and will iterate through all the nodes unless a task return failure.
	template <class T>
	class DiSequence : public DiTask<T>
	{
	public:

		//! Constructor
		DiSequence();

		//! Virtual destructor
		virtual ~DiSequence();

		//! Add a task to end of the sequence task list
		//! \param a_pkTask Pointer of the task that needs to add to the list
		//! \return Insertion success(true) or not(false)
		bool AddTask( DiTask<T>* a_pkTask );

		//! Add a task to given position in the sequence task list
		//! \param a_pkTask Pointer of the task that needs to add to the list
		//! \param a_uiPosition Position in the array the task to insert
		//! \return Insertion success(true) or not(false)
		bool AddTask( DiTask<T>* a_pkTask, unsigned int a_uiPosition );

		//! Remove a task in given position in the array
		//! \param a_uiPosition Array position of the task that needs removing
		//! \return Remove success(true) or not(false)
		bool RemoveTask(unsigned int a_uiPosition );

		//! Remove all tasks in the array
		//! \return Remove success(true) or not(false)
		bool RemoveAllTasks();

		//! Execute all the child tasks sequenctially.
		//! \param a_pkOwner Template class that this task to be executed upon.
		//! \return Integer to evaluate the new state of the template class or the AI object
		//!< This is more efficiently described through DI_TASK_RETURNS enumeration generated by the DiParser when \link setup_cpp Setting up C++ project \endlink
		virtual int Execute(T* a_pkOwner);

		//! Get total task in the list
		unsigned int GetTasksCount() const;

	protected:
		typename std::vector< DiTask<T>* > m_akTaskSequence; //!< Task list to execute
		typename std::vector< DiTask<T>* >::iterator m_itrCurrentTask; //!< Currently running task iterator

	};
	//***************************************************************************************************************************************************//

}
//***************************************************************************************************************************************************//

#endif

