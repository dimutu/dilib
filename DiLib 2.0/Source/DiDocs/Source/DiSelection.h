
/*
*********************************************************************************************************************************************
*
* Author: Dimutu Kulawardana
* Date: 06-06-2011
* Description: inherits from DiSequence to do one task in the list until its completed and move on to next after until all the task has been
*				ran through or return to parent if any task has failed to execute
*
*********************************************************************************************************************************************
*/

#ifndef _DI_SELECTION_TASK_H_
#define _DI_SELECTION_TASK_H_

#include "DiSequence.h"

//! \details Main library namespace

//! \namespace DiLib
namespace DiLib
{
	//! \class DiSelection
	//! \details Exeute tasks in selected order using the returning state value
	template <class T>
	class DiSelection : public DiSequence<T>
	{
	public:

		//! Constructor
		DiSelection();

		//! Virtual destructor
		virtual ~DiSelection();

		//! Execute current task until its completed and then move on to next and loop until one fails
		//! \param a_pkOwner Template class that this task to be executed upon.
		//! \return Integer to evaluate the new state of the template class or the AI object
		//!< This is more efficiently described through DI_TASK_RETURNS enumeration generated by the DiParser when \link setup_cpp Setting up C++ project \endlink
		virtual int Execute(T* a_pkOwner);

		//! Set the current execution back begining
		void SetExecuteBegin();

		//! Set the current execution to end so it will exit back to parent
		void SetExecuteEnd();

		//! Set the current task to given position in the array
		//! \param a_iPosition Task position in the array
		void SetExecutePosition(unsigned int a_iPosition);

	protected:
		//member variable goes here
		

	};
	//***************************************************************************************************************************************************//

}
//***************************************************************************************************************************************************//

#endif


