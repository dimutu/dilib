
/*
*********************************************************************************************************************************************
*
* Author: Dimutu Kulawardana
* Date: 04-06-2011
* Description: inherits from DiCondition and do the task on given time intervel and it can be a continues loop, eg: run animation, play sound
*
*********************************************************************************************************************************************
*/

#ifndef _DI_FILTER_TASK_H_
#define _DI_FILTER_TASK_H_

#include "DiTask.h"
#include "DiTimer.h"

//! \details Main library namespace

//! \namespace DiLib
namespace DiLib
{
	//! \class DiFilter
	//! \details Execute task on given time intervel and it can be a continues loop or fixed iteration count
	template <class T>
	class DiFilter : public DiTask<T>
	{

	public:
		//! Constructor
		DiFilter();

		//! Virtual destructor
		virtual ~DiFilter();

		//! Execute child task if the filtering time has met and reset timer for next execution if loop or iteration count set
		//! \param a_pkOwner Template class that this task to be executed upon.
		//! \return Integer to evaluate the new state of the template class or the AI object
		//!< This is more efficiently described through DI_TASK_RETURNS enumeration generated by the DiParser when \link setup_cpp Setting up C++ project \endlink

		virtual int Execute(T* a_pkOwner);

		//! Set the task needs to run when filter condition satisfied
		//!	\par Sets during tree intialization.
		//! \param a_pkTask Pointer reference to cshild task to execute
		virtual void SetTask(DiTask<T>* a_pkTask);

		//! Set the filter task timer
		//! \param a_uiTimeInterval Time in milliseconds
		virtual void SetTimer(const unsigned int a_uiTimeInterval);

		//! Set number of times this task should run if it's not set to loop
		//! \param a_MaxRunCycles Maximum number of iterations
		virtual void SetMaxRunCycles(unsigned int a_MaxRunCycles);

		//! Set filter to continues loop and this overrides max run cycle value
		//! \param a_bLoop True for continues iteration or False
		virtual void SetLoop(bool a_bLoop);

		//! Get maximum run cycles
		unsigned int GetMaxRunCycles() const;

		//! Get how many iterations this task has run
		unsigned int GetCurentRunCycle() const;

		//! Reset the current runtime counter back to ZERO
		virtual void ResetRunCycleCounter();

		//! Get currently set iteration to continues or not
		bool IsLoopOn() const;


	protected:
		DiTask<T>* m_pkTask; //!< Task to run on filter conditions satisfied

		DiTimer* m_pkTimer; //!< Timer instace use for filtering

		unsigned int m_uiMaxRunCycles; //!< How many times this should run in loop

		unsigned int m_uiRunCycleCounter; //!< How many times this already ran

		bool m_bIsLoopOn; //!< Continues iterations property

	};

}

#endif
